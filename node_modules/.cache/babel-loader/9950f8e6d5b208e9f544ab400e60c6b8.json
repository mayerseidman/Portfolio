{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup } from 'react-transition-group';\nimport Animatable from './../../Animatable';\nimport Text from './content/Text';\nimport Typing from './content/Typing';\n\nvar Message = function (_Component) {\n  _inherits(Message, _Component);\n\n  function Message() {\n    _classCallCheck(this, Message);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  Message.prototype.render = function render() {\n    var _this2 = this;\n\n    var className = 'Message ' + (this.props.isInbound ? 'Inbound' : 'Outbound');\n\n    var content = function () {\n      switch (_this2.props.type) {\n        case 'text':\n          return React.createElement(Text, _this2.props.content);\n\n        case 'typing':\n          return React.createElement(Typing, null);\n      }\n    }();\n\n    return React.createElement(TransitionGroup, {\n      component: 'li',\n      className: className\n    }, React.createElement(Animatable, {\n      classNames: 'Message-Content'\n    }, React.createElement('div', {\n      className: 'Message-Animatable-Container'\n    }, React.createElement('div', {\n      className: 'Message-Content'\n    }, content))));\n  };\n\n  return Message;\n}(Component);\n\nMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  type: PropTypes.oneOf(['text', 'typing']).isRequired,\n  content: PropTypes.object,\n  isInbound: PropTypes.bool.isRequired\n} : {};\nexport default Message;","map":null,"metadata":{},"sourceType":"module"}