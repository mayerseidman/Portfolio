{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup } from 'react-transition-group';\nimport Animatable from './../Animatable';\nimport GetStartedButton from './controls/GetStartedButton';\nimport ReplyButton from './controls/ReplyButton';\nimport TextInput from './controls/TextInput';\n\nvar ActionBar = function (_Component) {\n  _inherits(ActionBar, _Component);\n\n  function ActionBar() {\n    _classCallCheck(this, ActionBar);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  ActionBar.prototype.render = function render() {\n    var _this2 = this;\n\n    var items = function () {\n      return _this2.props.actions && _this2.props.actions.map(function (action, i) {\n        var li = function () {\n          switch (action.type) {\n            case 'get-started':\n              return React.createElement(GetStartedButton, action);\n\n            case 'quick-reply':\n              return React.createElement(ReplyButton, action);\n\n            case 'text-input':\n              return React.createElement(TextInput, action);\n          }\n        }();\n\n        return React.createElement(Animatable, {\n          classNames: 'ActionBar',\n          key: i\n        }, React.createElement('li', {\n          className: 'Action'\n        }, li));\n      });\n    }();\n\n    return React.createElement(TransitionGroup, {\n      component: 'ul',\n      className: 'ActionBar'\n    }, items);\n  };\n\n  return ActionBar;\n}(Component);\n\nActionBar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  actions: PropTypes.arrayOf(PropTypes.object)\n} : {};\nexport default ActionBar;","map":null,"metadata":{},"sourceType":"module"}