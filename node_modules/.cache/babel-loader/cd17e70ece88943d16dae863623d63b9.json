{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar TextInput = function (_Component) {\n  _inherits(TextInput, _Component);\n\n  function TextInput(props) {\n    _classCallCheck(this, TextInput);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      inputValue: ''\n    };\n    _this._handleKeyPress = _this._handleKeyPress.bind(_this);\n    _this._handleSubmit = _this._handleSubmit.bind(_this);\n    _this._updateInputValue = _this._updateInputValue.bind(_this);\n    return _this;\n  }\n\n  TextInput.prototype.render = function render() {\n    return React.createElement('div', {\n      className: 'TextInput'\n    }, React.createElement('input', {\n      className: 'Input',\n      placeholder: this.props.placeholder,\n      onChange: this._updateInputValue,\n      onSubmit: this._handleSubmit,\n      onKeyPress: this._handleKeyPress\n    }), React.createElement('button', {\n      className: 'Submit',\n      onClick: this._handleSubmit\n    }, this.props.submit));\n  };\n\n  TextInput.prototype._handleKeyPress = function _handleKeyPress(e) {\n    if (e.key === 'Enter') {\n      this.props.onSubmit(this.state.inputValue, this.props.callback);\n    }\n  };\n\n  TextInput.prototype._handleSubmit = function _handleSubmit(e) {\n    e.preventDefault();\n    this.props.onSubmit(this.state.inputValue, this.props.callback);\n  };\n\n  TextInput.prototype._updateInputValue = function _updateInputValue(e) {\n    this.setState({\n      inputValue: e.target.value\n    });\n  };\n\n  return TextInput;\n}(Component);\n\nTextInput.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  submit: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  callback: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired\n} : {};\nexport default TextInput;","map":null,"metadata":{},"sourceType":"module"}